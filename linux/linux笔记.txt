vim复制粘贴：光标处起始处——按V/v——移动到复制的末尾处——按y——光标移到想粘贴的地方——按P/p;
:e .   会打开内置文件浏览器，浏览当前目录下的文件
:sp [文件名]   横向分屏
:vsp [文件名] 纵向分屏

分屏窗口都是基于CTRL+w这个快捷键的，之后再按下面的键完成想要的操作
w: 切换到下一个窗口
r: 互换窗口
c: 关闭当前窗口，但不能关闭最后一个窗口
q：退出当前窗口，如果是最后一个窗口，则关闭vi
o: 关闭其他窗口

vim有编辑模式(insert)  一般模式(按ESC)   命令模式  ：。。

1)复制当前行：在一般模式下，按yy复制当前行，再按p，
                       将复制的内容粘贴到当前光标的下一行
2)复制当前行往下5行：在一般模式下，按5yy复制当前行，再按p，
                       将复制的内容粘贴到当前光标的下一行
3)删除光标所在行：在一般模式下，在所在光标行按dd即可
4)删除5行：在一般模式下，在所在光标行按5dd即可


|grep+想要查询的目标    用管道对搜索的目标进行过滤

查看进程 ps
ps    只会显示应用进程
ps -e  显示所有进程
ps -ef  以全格式形式查看所有进程  


pwd 查看当前所在目录

ls  显示当前目录下的文件
ls / 显示根目录下的文件
ls -i   可以显示文件的id（每个文件的id都是不同的）
ls desktop/  (ls后面可以跟上一个路径，显示该目录下的文件)
ls -l    也可以写成 ll          以列表形式显示（文件大小按字节算）   
ls -a 显示包括隐藏文件
ls -h 跟-l一样（唯一的区别就是文件大小按kb显示）
-a -h -l 可以组合使用，顺序不影响  -la -hl -ha   -h -l   -h -a

通配符 
ls *.txt   罗列以.txt为后缀的文件 *的意思是.txt前面的字符可以是任意的
ls  1*   罗列所有以1开头的问键
ls 1*.txt  以1开头，以.txt结尾，中间可以为任意字符
* 可以代表许多个任意字符     ？只能代表一个任意字符     
[1234]/[1-4]代表只能取1234中的任意一个字符(也可以表示为[a-z]，从a到z中取的任意一个字符)

cd change directory
cd  直接cd回家
cd - 来回切换上个访问目录，来回访问
cd .. 返回上一级目录
cd ~ 返回home目录下用户自己的目录
cd Desktop  去当前目录下的Desktop文件夹下（区分大小写）
Tab具有自动补全功能

ubuntu下，隐藏文件夹默认以 . 开头 

相对路径（根据当前目录下搜索想要的文件）  
绝对路径（以/开头，从根目录开始描述路径，无论当前位于什么目录下，都能进入想要的路径）


文件操作
touch test.txt（只能创建文件，不能创建目录，即文件夹）
touch .text2.txt (创建隐藏文件，只需在文件名称前加个  .  即可)
mkdir bb (创建了一个bb文件夹)
rm text.txt  (移除text.txt文件)
rm -d bb (移除文件夹时需要加上-d/-r,表示directory)
mv text.txt aa(将text.txt移动到aa文件夹中，不光可以移动文件，也可以是文件夹，这里的aa既可以用相对路径表示，也可以用绝对路径表示)  剪切功能
mv 126.obt aa/123.obt(在移动的同时进行改名)
cp -r aa/bb .(将当前目录下的aa文件夹中的bb文件夹拷贝到当前目录下)
cp  text.txt aa(复制，原文件不删除，当复制文件夹时，需要添加-r，代表是一个文件夹)
cp 126.txt aa/128.txt(复制并改名)

mv readme.txt readme.doc   //此时会看到readme.txt被成功重命名为readme.doc了


man  manual
rm --help
man rm    （调出rm该命令的帮助手册）

which   查找命令所在位置
每个命令（ls/touch mkdir mv cd）执行时，都会去执行一个程序，这个程序文件里保存了当我们执行
某个命令的时候需要做的哪些事i，来完成这个命令，输出结果
但 which cd 为空，因为cd是内置命令
/bin     binary,二进制文件，普通命令
/sbin    system binary,系统二进制文件，需要有系统权
/usr/bin   用户安装的应用程序
/use/sbin  超管安装的应用程序


文件搜索（ls通配符：仅限于当前目录下的模糊查找）
find 搜索范围 搜索条件(因为在较大目录下使用较慢，所以一般我们都会限制在特定的目录下进行搜索)
示例一：find /home -name 123 //精确搜索 
示例二：find /home -name 123* //模糊搜索 其他用法：*123*  123？？ 
示例三：find /home -iname abc //选项-i 不区分大小写 
示例四：find / -size +204800 //根据文件大小搜索
1数据块=512字节Byte=0.5KB -204800 204800 // 100MB 100*1024KB 100*1024*2*数据块 
示例五：find /home -user siki 
示例六：find /home -mmin -5 文件内容上次被修改时间在5分钟以内 
mmin上次文件内容被修改时间 amin 上次文件被访问时间 cmin 上次文件属性（文件的权限）被修改时间 -5 5分钟以内 +5超过5分钟 
示例七：find /home -type f 
-type文件类型    f文件  d目录(文件夹）l软链接文件(Link） ----------条件链接 -a and同时满足 -o or或者，满足其中一个即可 
示例八：find /home -name 123 -a -size +5 示例九：ls -i find /home -inum 3434

locate  搜索比较快，因为它搜索的是自己的索引库，而find是全局进行搜索（但查询速度同样跟计算机的性能有关）
        就好比查看一个新华字典，find是从头开始一页一页翻进行查找，而locate直接通过索引定位到想要查询的页，所以就快很多
缺点：更新的不及时，新创建的文件，在第一时间不会更新到索引库中
这里可以通过updatedb强制更新索引库，但在执行updatedb时，因为权限不够会产生报错，此时updatedb之前加上sudo，执行管理员权益，但需要密码验证
locate 125.txt(只要是包含125.txt的都会被搜索出来，也包括目录中出现的)
locate --help  查找帮助文档


查询文件里的内容  cat/more  （当内容过多时，more会对内容进行分页）
car/more +  文件名
car -b 文件名  （显示行号，但不包括空格）-n（不去除空行）

、grep(抓取)+某个内容+文件
grep user 126.txt        显示126.txt中有uer的那行内容
grep -n user  126.txt   会显示内容和行号（空行会被计算在内）
grep -v user   126.txt   反向搜索，显示不包括user内容的其余行内容（包括空行）
（-v可以应用于对特殊字符进行筛选进行去注释）
-i 在抓取的时候忽略大小写
^'#'  表示以#开头
s$  表示以s结尾的

echo + 内容   （在命令行中显示出来）
echo  内容>126.txt  （将内容显示进126.txt中，但会覆盖掉原有内容）
                  >>           (在原有内容上进行追加)


> 可以应用在任何命令中，只要这个命令是有结果的 ls >126.txt ...
（这里后面跟的文件，可以存在也可以不存在，若不存在就新创建一个）


管道
把一个命令的输出 通过管道连接 作为另一个命令的输入 
输出就是命令的结果，输入一般是一个命令的参数（cat xxx.txt 这个txt就是cat的输入） 
管道连接通过 | 建立。 
grep -v ^'#' /etc/services | more 
ls -lh | grep 125.txt   (从ls -lh 的输出中抓取125.txt的那行)



软链接（相当于快捷方式）
ln 即link
ln  文件/文件民  软连接名  （生成的软链接会放在当前目录下）


遇到有些需要超管命令时，可以用sudo（可以减少来回切换root帐号）
sudo useradd user (c创建用户名为user的用户)
sudo useradd -m user   在创建用户的同时会创建一个家目录（home）
                        -g  组名 新用户    （给创建的新用户指定所在组，前提这个组必须是存在的）
直接输入id  可以查看当前用户组id（gid）
也可以 id +用户名  （查看某个用户名的组id）
sudo passwd  user   给新用户user创建密码

使用 cat /etc/passwd  在显示内容的最后一行可以观察到是否成功创建新用户

直接使用passwd是用来设置当前用户的密码

su root  切换到root用户
exit   退出


若不在root用户下执行该命令  需要在其前面添加sudo
userdel user1      删除user1用户
userdel -r  user1  删除包括家目录在内
userdel -f  user1  强制删除，即使该用户在登陆状态，也会被删除（但仍能执行一些简单的命令）


在root用户下
groupadd group1  创建一个名为group1的组
cat /etc/group       查看是否成功添加组
groupmod -n group1new  group    将group1的名字改为group1new
groupdel  group1new    删除组

id分为用户id 组id  用户所有组id

关于配置文件
/etc/passwd 配置当前系统有哪些用户，以及用户的密码（密码在影子文件里面，passwd的影子文 件） 
1，用户名 
2，密码标志 
3，UID 
4，GID 
5，用户全名 
6，家目录 
7，使用的shell 
什么是shell?（我们的命令 cd ls ...） shell是用来解析命令的，它接收用户命令，然后调用相应的程序执行。 
shell相当于一个翻译，翻译我们的命令，让机器听懂。
第一种shell：/bin/bash 翻译一号 
第二种shell：/usr/sbin/nologin 翻译二号 
第三种shell：/bin/sh 翻译三号（我们创建用户的时候的shell）
 缺点不支持上下方向键，如何更换shell？

root下
password+用户  可以修改密码

cat /etc/shells  查看当前用户下有哪些shell，可以去使用的
chsh  切换shell（然后选择想要切换的shell）

cat /etc/group 
配置当前系统有哪些用户组    每行分为四个数据
1，组名 
2，组密码标志 
3，GID 
4，组中附加用户


cat /etc/shadow    用户的影子文件
cat /etc/gshadow   用户组的影子文件


内置命令一般是一些常用的命令  执行的更快
eg:which cd   没有任何返回,说明cd是内置命令   
                       如果返回了一个目录，则说明该命令是外部命令

1，为什么没有命令文件 因为cd这个命令是放在shell（bash里面的） 
2，什么是内置命令（cd dirs ls） 内置命令在系统启动时就调入内存，是常驻内存的，所以执行效率高。 
     而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存。 
大部分内置命令都是内置在shell中的，也有一些内置命令有自己单独的文件。 
系统启动，会把shell中的内置命令，其他其他不在shell中的内置命令加载到内存中。

whoami  当前登录用户
who   最初登陆时，登录的用户

usermod -g siki user1  将user1的初始组改为siki
usermod -G testu，user1 user1  将user1的附加组改为user1和testu，当然初始组仍然在附加组里，不受影响
（在原有的基础上修改，而不是添加）
usermod -s /bin/sh  user1  将user1的shell改为/bin/sh(第二种shell改法)

输入ll  
可以通过每个文件行前9个字符得出，用户，用户组，其他用户对该文件的操作权限
用户权限（文件对用户来说的权限，用户操作文件或者文件夹的权限） 
u g o 
- --- --- --- 
a表示文件类型 -二进制文件（包括不限于文本文件） d目录（文件夹） l（软连接文件） 
后面表示这个文件的权限 u（user）所有者 g（group）所属组 o（other）
其他用户 r读写 w写 x执行

可执行文件的颜色跟普通文件不同


权限修改 
只有文件所有者和超管可以修改文件的权限 
chmod change the permissions mode of file 
格式一
chmod [ugoa][+-=][rwx] 文件或者目录   //+r  -r =r   加减权限  使权限等于r
chmod u+w,g+x xx.txt 
格式二
用数字表示权限 r=4 w=2 x=1 
r--rw-rwx 467
651 rw-r-x--x 
chmod 651 xxfile chmod -R 777 xxfile  修改文件包括文件的所有子文件


chmod 修改文件权限 
chown(change owner)修改拥有者（所属者） 
chgrp(change group)修改拥有组（所属组） 
文件是所属者和所属组发生改变，用户对文件的权限也发生改变
chown newuser 文件/文件夹 修改文件或者文件夹的拥有者 
chgrp newgroupname 文件/文件夹 修改文件或者文件夹的所属组 
-R 递归修改所有子文件